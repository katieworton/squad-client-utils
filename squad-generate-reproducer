#!/usr/bin/python3


import argparse
import logging
import os
import sys
from squad_client.core.api import SquadApi
import squadutilslib

squad_host_url = "https://qa-reports.linaro.org/"
SquadApi.configure(cache=3600, url=os.getenv("SQUAD_HOST", squad_host_url))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def parse_args(raw_args):
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--group",
        required=True,
        help="squad group",
    )

    parser.add_argument(
        "--project",
        required=True,
        help="squad project",
    )
    parser.add_argument(
        "--test_type",
        required=False,
        default="ltp",
        help="Only ltp is currently supported",
    )

    parser.add_argument(
        "--build_names",
        required=True,
        help="the build name (for example, gcc-12-lkftconfig)",
        nargs="+",
    )

    parser.add_argument(
        "--device_name",
        required=True,
        help="the device name",
    )

    parser.add_argument(
        "--debug",
        action="store_true",
        default=False,
        help="Display debug messages",
    )
    parser.add_argument(
        "--tests", required=True, help="List of tests to rerun", nargs="+"
    )
    parser.add_argument(
        "--rerun_name",
        required=False,
        default="rerun",
        help="Name for the group of reruns",
    )
    parser.add_argument(
        "--retest_list_filename",
        required=False,
        default="retest_list.sh",
        help="Name for the group of reruns",
    )
    parser.add_argument(
        "--allow_unfinished",
        default=False,
        action="store_true",
        help="",
    )
    parser.add_argument(
        "--local",
        default=False,
        action="store_true",
        help="",
    )
    parser.add_argument(
        "--individual",
        default=False,
        action="store_true",
        help="Run all tests in one command or run each test in its own command",
    )
    parser.add_argument(
        "--run_dir",
        default="run_dir",
        help="The directory to place files generated",
    )

    return parser.parse_args(raw_args)


def run(raw_args=None):
    args = parse_args(raw_args)
    squadutilslib.generate_reproducer(
        args.group,
        args.project,
        "latest",
        args.device_name,
        args.tests,
        "test",
        args.debug,
        args.build_names,
        args.retest_list_filename,
        rerun_name="-".join(args.tests),
        suite_name="ltp-syscalls",
        test_type="ltp",
        run_dir=args.run_dir,
        allow_unfinished=False,
    )


if __name__ == "__main__":
    sys.exit(run())
