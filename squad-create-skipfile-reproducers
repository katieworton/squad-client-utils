#!/usr/bin/python3
# -*- coding: utf-8 -*-
# vim: set ts=4
#
# Copyright 2023-present Linaro Limited
#
# SPDX-License-Identifier: MIT

import argparse
import logging
import os
import pathlib
import sys
import time

import yaml
from squad_client.core.api import SquadApi

import squadutilslib

squad_host_url = "https://qa-reports.linaro.org/"
SquadApi.configure(cache=3600, url=os.getenv("SQUAD_HOST", squad_host_url))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

linux_stable_rc_branches = {
    "linux-4.14.y": "linux-stable-rc",
    "linux-4.19.y": "linux-stable-rc",
    "linux-5.4.y": "linux-stable-rc",
    "linux-5.10.y": "linux-stable-rc",
    "linux-5.15.y": "linux-stable-rc",
    "linux-6.1.y": "linux-stable-rc",
    "linux-6.3.y": "linux-stable-rc",
}

linux_mainline_next_branches = {
    "linux-mainline": "master",
    "linux-next": "master",
}


def supported_branch_names():
    return list(linux_stable_rc_branches) + list(linux_mainline_next_branches)


def look_up_project_by_branch(branch_name):
    if branch_name in linux_stable_rc_branches:
        return f"{linux_stable_rc_branches[branch_name]}-{branch_name}"
    elif branch_name in linux_mainline_next_branches:
        return f"{branch_name}-{linux_mainline_next_branches[branch_name]}"
    else:
        raise Exception(
            "Unknown branch name {0}. \nSupported branch names: \n\t- {1}".format(
                branch_name, "\n\t- ".join(supported_branch_names())
            )
        )


def parse_args(raw_args):
    parser = argparse.ArgumentParser(
        description="Produce TuxRun or TuxPlan reproducers for the LTP skipfile."
    )

    parser.add_argument(
        "--group",
        required=True,
        help="The name of the SQUAD group.",
    )

    parser.add_argument(
        "--allow-unfinished",
        required=False,
        action="store_true",
        default=False,
        help="Allow fetching of reproducers where the build is marked as unfinished.",
    )

    parser.add_argument(
        "--branches",
        required=False,
        default=supported_branch_names(),
        nargs="+",
        help="A list of SQUAD branches to be tested.",
    )

    parser.add_argument(
        "--build-names",
        required=False,
        default=["gcc-12-lkftconfig", "gcc-\d\d-lkftconfig"],
        nargs="+",
        help="The list of accepted build names (for example, gcc-12-lkftconfig). Regex is supported.",
    )

    parser.add_argument(
        "--debug",
        required=False,
        action="store_true",
        default=False,
        help="Display debug messages.",
    )

    parser.add_argument(
        "--device-names",
        required=False,
        default=["qemu-armv7", "qemu-arm64", "qemu-i386", "qemu-x86_64"],
        nargs="+",
        help="The list of device names (for example, qemu-arm64).",
    )

    parser.add_argument(
        "--search-build-count",
        required=False,
        default=10,
        type=int,
        help="The number of builds to fetch when searching for a reproducer.",
    )

    parser.add_argument(
        "--skipfile-url",
        required=False,
        default="https://raw.githubusercontent.com/Linaro/test-definitions/master/automated/linux/ltp/skipfile-lkft.yaml",
        help="URL of the skipfile to test.",
    )

    parser.add_argument(
        "--suite-name",
        required=False,
        default="ltp-syscalls",
        help="The suite name to grab a reproducer for.",
    )

    return parser.parse_args(raw_args)


def run(raw_args=None):
    start = time.time()
    args = parse_args(raw_args)

    skipfile = squadutilslib.get_file(args.skipfile_url)

    reason_list = []
    reproducer_scripts = []

    with open(skipfile) as f:
        reasons = yaml.load(f, Loader=yaml.FullLoader)
    for reason in reasons["skiplist"]:
        # If 'boards' is set to 'all' or at least one board for the skipfile entry
        # is in the list of devices we want to test
        if (
            reason["boards"] == args.device_names
            or reason["boards"] == "all"
            or (set(args.device_names) & set(reason["boards"]))
            or "all" in reason["boards"]
        ):
            if reason["branches"] == "all" or "all" in reason["branches"]:
                projects = [
                    look_up_project_by_branch(branch) for branch in args.branches
                ]
            else:
                for branch_name in reason["branches"]:
                    if branch_name in args.branches:
                        projects.append(look_up_project_by_branch(branch_name))
                    else:
                        logger.debug(
                            f"Branch name {branch_name} is not supported by this script or was not provided as an argument in --branches. Skipping."
                        )

            # Create a cleaned version of the skipfile reason that is easier to
            # work with
            cleaned_reason = {}
            if isinstance(reason["tests"], list):
                cleaned_reason["tests"] = reason["tests"]
            else:
                cleaned_reason["tests"] = [reason["tests"]]

            cleaned_reason["projects"] = projects

            reason_list.append(cleaned_reason)

    tmp_reproducer_filename = "skipfile-reproducer"

    for project in [look_up_project_by_branch(project) for project in args.branches]:
        reproducer_script_name = f"skipfile-reproducer-{args.group}-{project}"
        if pathlib.Path(reproducer_script_name).exists():
            pathlib.Path.unlink(pathlib.Path(reproducer_script_name))
        tmp_custom_reproducer_filename = reproducer_script_name + "_tmp_reproducer"
        for device in args.device_names:
            try:
                tmp_reproducer_filename = squadutilslib.get_reproducer(
                    args.group,
                    project,
                    device,
                    args.debug,
                    args.build_names,
                    args.suite_name,
                    args.search_build_count,
                    tmp_reproducer_filename,
                    args.allow_unfinished,
                    local=True,
                )
            except squadutilslib.ReproducerNotFound:
                logger.error(
                    f"No reproducer could be found for {args.group} {project} {device} {args.build_names}"
                )
                return -1

            for reason in reason_list:
                if project in reason["projects"]:
                    custom_command = squadutilslib.create_ltp_custom_command(
                        tests=reason["tests"]
                    )
                    reproducer_file = squadutilslib.create_custom_reproducer(
                        tmp_reproducer_filename,
                        args.suite_name,
                        custom_command,
                        local=True,
                        filename=tmp_custom_reproducer_filename,
                    )
                    if not pathlib.Path(reproducer_script_name).exists():
                        reproducer_scripts.append(reproducer_script_name)
                    with open(reproducer_script_name, "a+") as multiple_reproducer_file:
                        reproducer = (
                            pathlib.Path(reproducer_file)
                            .read_text(encoding="utf-8")
                            .split("\n")
                        )
                        for line in reproducer:
                            # Don't write back the #!/bin/bash part of reproducer
                            if "#!/bin/bash" != line.strip():
                                multiple_reproducer_file.write(line + "\n")

                    logger.debug(reproducer_file)

        if pathlib.Path(tmp_custom_reproducer_filename).exists():
            pathlib.Path.unlink(pathlib.Path(tmp_custom_reproducer_filename))
        if pathlib.Path(tmp_reproducer_filename).exists():
            pathlib.Path.unlink(pathlib.Path(tmp_reproducer_filename))

    logger.info(
        "Finished creating skipfile reproducers. Files created: %s",
        ", ".join(reproducer_scripts),
    )
    logger.debug(f"Took {time.time() - start}s")


if __name__ == "__main__":
    sys.exit(run())
