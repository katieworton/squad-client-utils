#!/usr/bin/python3
# -*- coding: utf-8 -*-
# vim: set ts=4

import argparse
import os
import pathlib
import pprint
import sys
from squad_client.core.api import SquadApi
from squad_client.core.models import Squad
import yaml
import squadutilslib

# example: ./generate_skipfile_rerun_scripts.py --test_type ltp --devices "qemu-armv7" "qemu-arm64" "qemu-i386" "qemu-x86_64"


branch_tree_lookup_stable = {
    "linux-4.14.y": "linux-stable-rc",
    "linux-4.19.y": "linux-stable-rc",
    "linux-5.4.y": "linux-stable-rc",
    "linux-5.10.y": "linux-stable-rc",
    "linux-5.15.y": "linux-stable-rc",
    "linux-6.1.y": "linux-stable-rc",
    "linux-6.2.y": "linux-stable-rc",
}

branch_tree_lookup_other = {
    "linux-mainline": "master",
    "linux-next": "master",
}

# some devices are named differently in the skipfiles
skipfile_device_name_lookup = {
    "qemu-armv7": "qemu_arm",
    "qemu-arm64": "qemu_arm64",
    "qemu-i386": "qemu_i386",
    "qemu-x86_64": "qemu_x86_64",
}

all_qemu_devices = ["qemu-armv7", "qemu-arm64", "qemu-i386", "qemu-x86_64"]

all_projects = [
    f"{branch}-{tree_name}" for branch, tree_name in branch_tree_lookup_stable.items()
] + [f"{branch}-{tree_name}" for tree_name, branch in branch_tree_lookup_other.items()]
all_branches = [b for b in branch_tree_lookup_stable.keys()] + [
    b for b in branch_tree_lookup_other.keys()
]


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--branches",
        required=False,
        default=all_branches,
        help="Branches - defaults to all",
        nargs="+",
    )

    parser.add_argument(
        "--devices", default=all_qemu_devices, help="Devices to test on", nargs="+"
    )
    parser.add_argument("--environment", default=["all"], nargs="+")

    parser.add_argument(
        "--build_names",
        required=False,
        default=[
            "gcc-12-lkftconfig",
            "gcc-\d\d-lkftconfig",
        ],
        help="A list of regexs that capture the acceptable build names.",
        nargs="+",
    )
    parser.add_argument(
        "--test_type",
        default="ltp",
        help="",
    )
    parser.add_argument(
        "--retest_list_filename",
        default="retest_list.sh",
        help="The name of the file that logs all the skip test rerun scripts.",
    )
    parser.add_argument(
        "--allow_unfinished",
        default=False,
        action="store_true",
        help="Allow use of unfinished builds.",
    )
    parser.add_argument(
        "--allow_unrecognised_devices",
        default=False,
        action="store_true",
        help=f"Allow devices which are not in the known devices list: {', '.join(all_qemu_devices)}",
    )
    parser.add_argument(
        "--local",
        default=False,
        action="store_true",
        help="",
    )
    parser.add_argument(
        "--debug",
        default=False,
        action="store_true",
        help="",
    )
    parser.add_argument(
        "--run_dir",
        default="run_dir",
        help="The location where reproducer scripts and related logs should be stored.",
    )

    parser.add_argument(
        "--skipfile",
        default="https://raw.githubusercontent.com/Linaro/test-definitions/master/automated/linux/ltp/skipfile-lkft.yaml",
        help="The location of the skipfile (URL or local file).",
    )

    return parser.parse_args()




def run():
    args = parse_args()
    # run skipgen on skipfile
    skipgen_file_name = "skipgen.py"
    if os.path.exists(skipgen_file_name):
        os.remove(skipgen_file_name)
    url = "https://gitlab.com/Linaro/lkft/users/katie.worton/skipgen-py/-/raw/main/skipgen.py"
    #squadutilslib.get_file(url)

    skipfile_filename = args.skipfile.split("/")[-1]
    print(skipfile_filename)

    url = args.skipfile
    filename = "skipfile-lkft.yaml" # squadutilslib.get_file(url)
    print(filename)

    skip_dict = {}

    with open(filename) as f:
        reasons = yaml.load(f, Loader=yaml.FullLoader)
    for reason in reasons['skiplist']:
        if reason['boards'] == 'all' or 'all' in reason['boards']:
            devices = ['qemu-armv7', 'qemu-arm64', 'qemu-i386', 'qemu-x86_64']
            if reason['branches'] == 'all' or 'all' in reason['branches']:
                projects = all_projects
                #print(projects)
            else:
                for branch_name in reason['branches']:
                    if branch_name in branch_tree_lookup_stable:
                        project_name = [f"{branch_tree_lookup_stable[branch_name]}-{branch_name}"]
                        projects += project_name
                    elif branch_name in branch_tree_lookup_other:
                        project_name = [f"{branch_name}-{branch_tree_lookup_other[branch_name]}"]
                        projects += project_name
                    else:
                        print(f"WARNING: branch name {branch_name} is not supported by this script. Skipping")
                        #sys.exit(1)
            rerun = ''
            for test in reason['tests']:
                rerun += f' {test}'

            print("\nRERUN LIST", rerun)
            skip_dict[rerun] = projects

    pprint.pprint(skip_dict)
    #sys.exit(1)


    # import skipgen

    # skipfile = pathlib.Path(skipfile_filename).read_text()

    # skips = skipgen.parse_skipfile(skipfile)
    SquadApi.configure(url="https://qa-reports.linaro.org/")

    group_name = "lkft"
    group = Squad().group(group_name)
    branches = args.branches

    environments_skipfile = args.environment

    if not args.allow_unrecognised_devices and not all(
        device in all_qemu_devices for device in args.devices
    ):
        print(
            f"ERROR, unrecognised device(s): {set(args.devices).difference(set(all_qemu_devices))}"
        )
        print(
            "Please check the device names supplied and add the --allow_unrecognised_devices if you wish to override this check"
        )
        sys.exit(1)

    for branch_name in branches:
        if branch_name in branch_tree_lookup_stable:
            project_name = f"{branch_tree_lookup_stable[branch_name]}-{branch_name}"
        elif branch_name in branch_tree_lookup_other:
            project_name = f"{branch_name}-{branch_tree_lookup_other[branch_name]}"
        else:
            print(f"Error: branch name {branch_name} is not supported by this script")
            sys.exit(1)

        print("Project name", project_name)
        project = group.project(project_name)
        environments = [
            project.environment(environment) for environment in args.devices
        ]

        # Check environments are all valid:
        if None in environments:
            print(
                "Environment not found",
                [
                    environment
                    for environment in args.devices
                    if not project.environment(environment)
                ],
            )
            print("ERROR, check environments are valid")
            sys.exit(1)

        suite_name="ltp-syscalls"
        run_dir=args.run_dir

        for device_name in args.devices:
            for tests, projects in skip_dict.items():
                print(f"RUN FOR {device_name}")
                test_list = tests.split(" ")
                build, reproducer_dir, testrun = squadutilslib.find_test_run(
                    group_name,
                    project_name,
                    "latest",
                    device_name,
                    tests,
                    "test",
                    args.debug,
                    args.build_names,
                    args.retest_list_filename,
                    rerun_name="-".join(test_list),
                    suite_name=suite_name,
                    test_type="ltp",
                    run_dir=run_dir,
                    allow_unfinished=False,
                )
                tuxrun = squadutilslib.get_reproducer(run_dir, build, reproducer_dir, testrun)
                print(tuxrun)

                new_command = squadutilslib.create_new_reproducer(tuxrun, suite_name, tests)
                print(new_command)

    print("Complete!")


if __name__ == "__main__":
    import time

    start_time = time.time()
    result = run()
    print(f"!!! {(time.time() - start_time)} seconds !!!")
    sys.exit(result)
