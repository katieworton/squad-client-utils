#!/usr/bin/python3
# -*- coding: utf-8 -*-
# vim: set ts=4


import argparse
import json
import pathlib
import subprocess
import sys
import regex as re


def read_result(filename, device, build_name):
    json_file_text = pathlib.Path(filename).read_text(encoding="utf-8")
    results_json = json.loads(json_file_text)
    result = results_json["lava"]["command"]["result"]
    print(result)
    with open("results.txt", "a") as f:
        f.write(f"{filename},{device},{build_name},{result}\n")


def parse_args():
    parser = argparse.ArgumentParser(
        description="Run tests generated by squad_rerun_test_list"
    )

    parser.add_argument("--retest_file", default="retest_list.sh")
    parser.add_argument(
        "--results_only",
        action="store_true",
        help="Only read results - for tests that have already been run",
    )

    return parser.parse_args()


def run():
    args = parse_args()
    retest_scripts = []

    with open(args.retest_file) as f:
        retest_scripts = f.read().splitlines()

    for script in retest_scripts:
        script_entries = []
        print(script)
        with open(script) as f:
            script_entries = f.read().splitlines()
        for line in script_entries:
            if "tuxrun" in line:
                print(line)
                if not args.results_only:
                    subprocess.run(line, shell=True)
                results_file = re.findall("--results (\S+)", line)[0]
                device = re.findall("--device (\S+)", line)[0]
                build_name = re.findall(f"results-(\S+)-{device}", line)[0]
                read_result(results_file, device, build_name)


if __name__ == "__main__":
    sys.exit(run())
