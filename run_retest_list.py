#!/usr/bin/python3
# -*- coding: utf-8 -*-
# vim: set ts=4


import argparse
import json
import pathlib
import subprocess
import sys
import regex as re


def read_result(filename, log, device, build_name, results_file):
    try:
        json_file_text = pathlib.Path(filename).read_text(encoding="utf-8")
    except FileNotFoundError:
        result = "results not found - check test was run"
        reason = "results not found - check test was run"
        with open(results_file, "a") as f:
            f.write(f"{filename},{log},{device},{build_name},{result},{reason}\n")
        return

    results_json = json.loads(json_file_text)
    try:
        result = results_json["lava"]["command"]["command"]["result"]
    except KeyError:
        result = "result not found - investigate"
    if result == "fail":
        try:
            reason = results_json["lava"]["job"]["error_msg"]
        except KeyError:
            reason = "reason not found - investigate"
    else:
        reason = "N/A"
    try:
        time = results_json["lava"]["command"]["duration"]
    except KeyError:
        time = "time not found"
    print(result, reason)
    with open(results_file, "a") as f:
        # TODO helper writer function since I have mult writes that look same and haven't even done headings
        f.write(f"{filename},{log},{device},{build_name},{result},{reason},{time}\n")


def parse_args():
    parser = argparse.ArgumentParser(
        description="Run tests generated by squad_rerun_test_list"
    )

    parser.add_argument("--retest_file", default="retest_list.sh")
    parser.add_argument("--results_file", default="results.csv")
    parser.add_argument(
        "--results_only",
        action="store_true",
        help="Only read results - for tests that have already been run",
    )

    return parser.parse_args()


def run():
    args = parse_args()
    retest_scripts = []

    with open(args.retest_file) as f:
        retest_scripts = f.read().splitlines()

    for script in retest_scripts:
        script_entries = []
        print(script)
        with open(script) as f:
            script_entries = f.read().splitlines()
        for line in script_entries:
            if "tuxrun" in line:
                print(line)
                if not args.results_only:
                    subprocess.run(line, shell=True)
                results_file = re.findall("--results (\S+)", line)[0]
                device = re.findall("--device (\S+)", line)[0]
                log = re.findall("--log-file (\S+)", line)[0]
                # TODO - this will change
                build_name = re.findall(f"results-(\S+)-{device}", line)[0]
                read_result(results_file, log, device, build_name, args.results_file)


if __name__ == "__main__":
    sys.exit(run())
